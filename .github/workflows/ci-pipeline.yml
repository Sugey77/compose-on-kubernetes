name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Se activa en cada push a la rama principal
  pull_request:
    branches:
      - main  # También cuando se hace un pull request hacia la rama principal

jobs:
  build:
    runs-on: ubuntu-latest  # El entorno de ejecución, puedes usar otro si lo prefieres

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2  # Clona el repositorio en el entorno de GitHub Actions

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2  # Configura Docker Buildx

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker Image
        run: |
          docker build -t your-image-name .  # Construye la imagen Docker

      - name: Run Tests
        run: |
          docker run your-image-name npm test  # Ejecuta las pruebas en el contenedor

      - name: Push Docker Image to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: sugey77/your-image-name:latest  # Usa tu nombre de usuario en Docker Hub

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ./kubernetes-manifests/  # Aplica los manifiestos de Kubernetes
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}  # Usa el secret con la configuración de kubeconfig

